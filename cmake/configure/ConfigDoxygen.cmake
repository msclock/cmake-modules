# check if Doxygen is installed
macro(configDoxygen)

  find_package(Doxygen OPTIONAL_COMPONENTS dot mscgen dia)
  if(DOXYGEN_FOUND)

    # The PROJECT_NAME tag is a single word (or a sequence of words surrounded
    # by double-quotes, unless you are using Doxywizard) that should identify
    # the project for which the documentation is generated. This name is used in
    # the title of most generated pages and in a few other places.

    # The default value is: My Project.

    set(DOXYGEN_PROJECT_NAME ${CMAKE_PROJECT_NAME})

    # Using the PROJECT_BRIEF tag one can provide an optional one line
    # description for a project that appears at the top of each page and should
    # give viewer a quick idea about the purpose of the project. Keep the
    # description short.

    set(DOXYGEN_BRIEF "Api Document")

    # The PROJECT_NUMBER tag can be used to enter a project or revision number.
    # This could be handy for archiving the generated documentation or if some
    # version control system is used.

    set(DOXYGEN_PROJECT_NUMBER ${CMAKE_PROJECT_VERSION})

    # The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute)
    # path into which the generated documentation will be written. If a relative
    # path is entered, it will be relative to the location where doxygen was
    # started. If left blank the current directory will be used.
    # set(DOXYGEN_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/")

    # The RECURSIVE tag can be used to specify whether or not subdirectories
    # should be searched for input files as well.

    # The default value is: NO.

    set(DOXYGEN_RECURSIVE YES)

    # If the EXTRACT_ALL tag is set to YES, doxygen will assume all entities in
    # documentation are documented, even if no documentation was available.
    # Private class members and static file members will be hidden unless the
    # EXTRACT_PRIVATE respectively EXTRACT_STATIC tags are set to YES.

    # Note This will also disable the warnings about undocumented members that
    # are normally produced when WARNINGS is set to YES. The default value is:
    # NO.

    set(DOXYGEN_EXTRACT_ALL YES)

    # The QUIET tag can be used to turn on/off the messages that are generated
    # to standard output by doxygen. If QUIET is set to YES this implies that
    # the messages are off.

    # The default value is: NO.

    set(DOXYGEN_QUIET YES)

    # If you use STL classes (i.e. std::string, std::vector, etc.) but do not
    # want to include (a tag file for) the STL sources as input, then you should
    # set this tag to YES in order to let doxygen match functions declarations
    # and definitions whose arguments contain STL classes (e.g.
    # func(std::string); versus func(std::string) {}). This also make the
    # inheritance and collaboration diagrams that involve STL classes more
    # complete and accurate.

    # The default value is: NO.

    set(DOXYGEN_BUILTIN_STL_SUPPORT YES)

    # The OUTPUT_LANGUAGE tag is used to specify the language in which all
    # documentation generated by doxygen is written. Doxygen will use this
    # information to generate all constant output in the proper language.

    # Possible values are: Afrikaans, Arabic, Armenian, Brazilian, Catalan,
    # Chinese, Chinese-Traditional, Croatian, Czech, Danish, Dutch, English
    # (United States), Esperanto, Farsi (Persian), Finnish, French, German,
    # Greek, Hungarian, Indonesian, Italian, Japanese, Japanese-en (Japanese
    # with English messages), Korean, Korean-en (Korean with English messages),
    # Latvian, Lithuanian, Macedonian, Norwegian, Persian (Farsi), Polish,
    # Portuguese, Romanian, Russian, Serbian, Serbian-Cyrillic, Slovak, Slovene,
    # Spanish, Swedish, Turkish, Ukrainian and Vietnamese.

    # The default value is: English.

    set(DOXYGEN_OUTPUT_LANGUAGE English)

    # If the value of the INPUT tag contains directories, you can use the
    # FILE_PATTERNS tag to specify one or more wildcard patterns (like *.cpp and
    # *.h) to filter out the source-files in the directories. Note that for
    # custom extensions or not directly supported extensions you also need to
    # set EXTENSION_MAPPING for the extension otherwise the files are not read
    # by doxygen. Note the list of default checked file patterns might differ
    # from the list of default file extension mappings. If left blank the
    # following patterns are tested: *.c, *.cc, *.cxx, *.cpp, *.c++, *.java,
    # *.ii, *.ixx, *.ipp, *.i++, *.inl, *.idl, *.ddl, *.odl, *.h, *.hh, *.hxx,
    # *.hpp, *.h++, *.l, *.cs, *.d, *.php, *.php4, *.php5, *.phtml, *.inc, *.m,
    # *.markdown, *.md, *.mm, *.dox (to be provided as doxygen C comment), *.py,
    # *.pyw, *.f90, *.f95, *.f03, *.f08, *.f18, *.f, *.for, *.vhd, *.vhdl,
    # *.ucf, *.qsf and *.ice.

    # set(DOXYGEN_FILE_PATTERNS "*.h;*.cpp;*.hpp")

    # When TYPEDEF_HIDES_STRUCT tag is enabled, a typedef of a struct, union, or
    # enum is documented as struct, union, or enum with the name of the typedef.
    # So typedef struct TypeS {} TypeT, will appear in the documentation as a
    # struct with name TypeT. When disabled the typedef will appear as a member
    # of a file, namespace, or class. And the struct will be named TypeS. This
    # can typically be useful for C code in case the coding convention dictates
    # that all compound types are typedef'ed and only the typedef is referenced,
    # never the tag name.

    # The default value is: NO.

    set(DOXYGEN_TYPEDEF_HIDES_STRUCT YES)

    # If the REFERENCED_BY_RELATION tag is set to YES then for each documented
    # entity all documented functions referencing it will be listed.

    # The default value is: NO.

    set(DOXYGEN_REFERENCED_BY_RELATION NO)

    # If the REFERENCES_RELATION tag is set to YES then for each documented
    # function all documented entities called/used by that function will be
    # listed.

    # The default value is: NO.

    set(DOXYGEN_REFERENCES_RELATION NO)

    # If the REFERENCES_LINK_SOURCE tag is set to YES and SOURCE_BROWSER tag is
    # set to YES then the hyperlinks from functions in REFERENCES_RELATION and
    # REFERENCED_BY_RELATION lists will link to the source code. Otherwise they
    # will link to the documentation.

    # The default value is: YES.

    set(DOXYGEN_REFERENCES_LINK_SOURCE NO)

    # If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool
    # is available from the path. This tool is part of Graphviz, a graph
    # visualization toolkit from AT&T and Lucent Bell Labs. The other options in
    # this section have no effect if this option is set to NO
    #
    # The default value is: NO.

    set(DOXYGEN_HAVE_DOT YES)

    # If the CLASS_DIAGRAMS tag is set to YES, doxygen will generate a class
    # diagram (in HTML and LaTeX) for classes with base or super classes.
    # Setting the tag to NO turns the diagrams off. Note that this option also
    # works with HAVE_DOT disabled, but it is recommended to install and use
    # dot, since it yields more powerful graphs.

    # The default value is: YES.

    # This tag requires that the tag HAVE_DOT is set to YES.

    set(DOXYGEN_CLASS_DIAGRAMS YES)

    # If the CALL_GRAPH tag is set to YES then doxygen will generate a call
    # dependency graph for every global function or class method. Note that
    # enabling this option will significantly increase the time of a run. So in
    # most cases it will be better to enable call graphs for selected functions
    # only using the \callgraph command. Disabling a call graph can be
    # accomplished by means of the command \hidecallgraph.

    # The default value is: NO.

    # This tag requires that the tag HAVE_DOT is set to YES.

    set(DOXYGEN_CALL_GRAPH YES)

    # If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller
    # dependency graph for every global function or class method. Note that
    # enabling this option will significantly increase the time of a run. So in
    # most cases it will be better to enable caller graphs for selected
    # functions only using the \callergraph command. Disabling a caller graph
    # can be accomplished by means of the command \hidecallergraph.

    # The default value is: NO.

    # This tag requires that the tag HAVE_DOT is set to YES.

    set(DOXYGEN_CALLER_GRAPH YES)

    # If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical
    # hierarchy of all classes instead of a textual one.

    # The default value is: YES.

    # This tag requires that the tag HAVE_DOT is set to YES.

    set(DOXYGEN_GRAPHICAL_HIERARCHY YES)

    # The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of nodes
    # that will be shown in the graph. If the number of nodes in a graph becomes
    # larger than this value, doxygen will truncate the graph, which is
    # visualized by representing a node as a red box. Note that doxygen if the
    # number of direct children of the root node in a graph is already larger
    # than DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also
    # note that the size of a graph can be further restricted by
    # MAX_DOT_GRAPH_DEPTH.

    # Minimum value: 0, maximum value: 10000, default value: 50.

    # This tag requires that the tag HAVE_DOT is set to YES.

    set(DOXYGEN_DOT_GRAPH_MAX_NODES 100)

    # If the SOURCE_BROWSER tag is set to YES then a list of source files will
    # be generated. Documented entities will be cross-referenced with these
    # sources. Note: To get rid of all source code in the generated output, make
    # sure that also VERBATIM_HEADERS is set to NO.

    # The default value is: NO.

    set(DOXYGEN_SOURCE_BROWSER YES)

    # If the UML_LOOK tag is set to YES, doxygen will generate inheritance and
    # collaboration diagrams in a style similar to the OMG's Unified Modeling
    # Language.

    # The default value is: NO.

    # This tag requires that the tag HAVE_DOT is set to YES.

    set(DOXYGEN_UML_LOOK YES)

    # If the GENERATE_HTML tag is set to YES, doxygen will generate HTML output

    # The default value is: YES.

    set(DOXYGEN_GENERATE_HTML YES)

    # If the GENERATE_XML tag is set to YES, doxygen will generate XML output

    # The default value is: NO.

    set(DOXYGEN_GENERATE_XML YES)

    # The GENERATE_TREEVIEW tag is used to specify whether a tree-like index
    # structure should be generated to display hierarchical information. If the
    # tag value is set to YES, a side panel will be generated containing a
    # tree-like index structure (just like the one that is generated for HTML
    # Help). For this to work a browser that supports JavaScript, DHTML, CSS and
    # frames is required (i.e. any modern browser). Windows users are probably
    # better off using the HTML help feature.

    # Via custom style sheets (see HTML_EXTRA_STYLESHEET) one can further
    # fine-tune the look of the index. As an example, the default style sheet
    # generated by doxygen has an example that shows how to put an image at the
    # root of the tree instead of the PROJECT_NAME.

    # Since the tree basically has the same information as the tab index, you
    # could consider setting DISABLE_INDEX to YES when enabling this option.

    # The default value is: NO.

    # This tag requires that the tag GENERATE_HTML is set to YES.

    set(DOXYGEN_GENERATE_TREEVIEW YES)
  else()
    message(
      STATUS
        "Doxygen need to be installed to generate the doxygen documentation")
  endif()
endmacro()
